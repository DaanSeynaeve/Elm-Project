Elm.CustomTools = Elm.CustomTools || {};
Elm.CustomTools.make = function (_elm) {
   "use strict";
   _elm.CustomTools = _elm.CustomTools || {};
   if (_elm.CustomTools.values)
   return _elm.CustomTools.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "CustomTools",
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var hey = F2(function (_v0,v) {
      return function () {
         return function () {
            switch (v.ctor)
            {case "Call": return false;
               case "Met": return true;}
            _U.badCase($moduleName,
            "between lines 56 and 58");
         }();
      }();
   });
   var hey2 = hey(hey);
   var thisis = function (s) {
      return function () {
         switch (s)
         {case "crazy": return true;}
         return false;
      }();
   };
   var you = true;
   var Met = {ctor: "Met"};
   var Call = {ctor: "Call"};
   var i = F2(function (a,_v4) {
      return function () {
         return function () {
            switch (a.ctor)
            {case "Just": return a._0;
               case "Nothing": return Call;}
            _U.badCase($moduleName,
            "between lines 51 and 53");
         }();
      }();
   });
   var test = A2(hey,
   hey,
   A2(i,
   $Maybe.Just(Met),
   you)) && thisis("crazy");
   var header = function (s) {
      return A2($Html.h2,
      _L.fromArray([]),
      _L.fromArray([$Html.text(s)]));
   };
   var nor = F2(function (x,y) {
      return A2(F2(function (x,y) {
         return x || y;
      }),
      $Basics.not(x),
      $Basics.not(y));
   });
   _op["?"] = F2(function ($default,
   maybe) {
      return A2($Maybe.withDefault,
      $default,
      maybe);
   });
   _op["$"] = F2(function (caption,
   s) {
      return A2($Signal.map,
      $Debug.watch(caption),
      s);
   });
   var watchSignal = function (caption) {
      return $Signal.map($Debug.watch(caption));
   };
   var toMaybe = F2(function (a,
   bool) {
      return function () {
         switch (bool)
         {case false:
            return $Maybe.Nothing;
            case true:
            return $Maybe.Just(a);}
         _U.badCase($moduleName,
         "between lines 16 and 18");
      }();
   });
   var isDefined = function (maybe) {
      return function () {
         switch (maybe.ctor)
         {case "Just": return true;}
         return false;
      }();
   };
   var zip = F2(function (xs,ys) {
      return A3($List.map2,
      F2(function (v0,v1) {
         return {ctor: "_Tuple2"
                ,_0: v0
                ,_1: v1};
      }),
      xs,
      ys);
   });
   _elm.CustomTools.values = {_op: _op
                             ,zip: zip
                             ,isDefined: isDefined
                             ,toMaybe: toMaybe
                             ,watchSignal: watchSignal
                             ,nor: nor
                             ,header: header
                             ,Call: Call
                             ,Met: Met
                             ,you: you
                             ,thisis: thisis
                             ,i: i
                             ,hey: hey
                             ,hey2: hey2
                             ,test: test};
   return _elm.CustomTools.values;
};