Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $CustomTools = Elm.CustomTools.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $ItemDecorator = Elm.ItemDecorator.make(_elm),
   $ItemFeed = Elm.ItemFeed.make(_elm),
   $ItemManager = Elm.ItemManager.make(_elm),
   $List = Elm.List.make(_elm),
   $MailItem = Elm.MailItem.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $ReminderForm = Elm.ReminderForm.make(_elm),
   $ReminderItem = Elm.ReminderItem.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Shortcuts = Elm.Shortcuts.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Static = Elm.Static.make(_elm);
   var css = function (path) {
      return A3($Html.node,
      "link",
      _L.fromArray([$Html$Attributes.rel("stylesheet")
                   ,$Html$Attributes.href(path)]),
      _L.fromArray([]));
   };
   var view = F2(function (address,
   state) {
      return A2($Html.main$,
      _L.fromArray([]),
      _L.fromArray([A2($Html.header,
                   _L.fromArray([]),
                   _L.fromArray([css("style.css")]))
                   ,A2($Html.body,
                   _L.fromArray([]),
                   _L.fromArray([A2($ItemManager.view,
                   A2($Signal.forwardTo,
                   address,
                   $Maybe.Just),
                   state)]))]));
   });
   var update = F2(function (action,
   model) {
      return function () {
         switch (action.ctor)
         {case "Just":
            return A2($ItemManager.update,
              action._0,
              model);
            case "Nothing": return model;}
         _U.badCase($moduleName,
         "between lines 114 and 116");
      }();
   });
   var localmail = A2($Signal.map,
   function ($) {
      return $Maybe.Just($ItemManager.FM($));
   },
   $ReminderForm.localmail);
   var mailbox = $Signal.mailbox($Maybe.Nothing);
   var master = $Signal.mergeMany(A2($Basics._op["++"],
   _L.fromArray([A2($CustomTools._op["$"],
   "MAILBOX",
   mailbox.signal)]),
   A2($Basics._op["++"],
   _L.fromArray([A2($CustomTools._op["$"],
   "LOCAL MAILBOXES",
   localmail)]),
   _L.fromArray([A2($CustomTools._op["$"],
   "SHORTCUT",
   $Shortcuts.signal)]))));
   var feedInit = $ItemFeed.init(A2($Basics._op["++"],
   A2($List.map,
   function ($) {
      return $ItemDecorator.decorate($ItemDecorator.AMail)($MailItem.init($));
   },
   $Static.emails),
   A2($List.map,
   function ($) {
      return $ItemDecorator.decorate($ItemDecorator.AReminder)($ReminderItem.init($));
   },
   $Static.reminders)));
   var init = A2($ItemManager.init,
   feedInit,
   $ReminderForm.init);
   var state = A3($Signal.foldp,
   update,
   init,
   A2($CustomTools._op["$"],
   "MASTER",
   master));
   var main = A2($Signal.map,
   view(mailbox.address),
   A2($CustomTools._op["$"],
   "MAIN STATE",
   state));
   _elm.Main.values = {_op: _op
                      ,main: main
                      ,state: state
                      ,init: init
                      ,feedInit: feedInit
                      ,master: master
                      ,mailbox: mailbox
                      ,localmail: localmail
                      ,update: update
                      ,view: view
                      ,css: css};
   return _elm.Main.values;
};