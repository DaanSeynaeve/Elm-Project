Elm.MailItem = Elm.MailItem || {};
Elm.MailItem.make = function (_elm) {
   "use strict";
   _elm.MailItem = _elm.MailItem || {};
   if (_elm.MailItem.values)
   return _elm.MailItem.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "MailItem",
   $Basics = Elm.Basics.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Static = Elm.Static.make(_elm),
   $String = Elm.String.make(_elm);
   var makeBody = function (state) {
      return state.collapsed ? $String.fromList(A2($List.take,
      200,
      $String.toList(state.$static.body))) : state.$static.body;
   };
   var update = F2(function (action,
   model) {
      return function () {
         switch (action.ctor)
         {case "ToggleCollapse":
            return {_: {}
                   ,$static: model.$static
                   ,collapsed: $Basics.not(model.collapsed)};}
         return model;
      }();
   });
   var ToggleCollapse = {ctor: "ToggleCollapse"};
   var makeMoreButton = F2(function (address,
   state) {
      return function () {
         var lbl = function () {
            var _v1 = state.collapsed;
            switch (_v1)
            {case false: return "Less";
               case true: return "More";}
            _U.badCase($moduleName,
            "between lines 53 and 56");
         }();
         return _U.cmp($String.length(state.$static.body),
         200) > 0 ? _L.fromArray([A2($Html.button,
         _L.fromArray([A2($Html$Events.onClick,
         address,
         ToggleCollapse)]),
         _L.fromArray([$Html.text(lbl)]))]) : _L.fromArray([]);
      }();
   });
   var view = F3(function (address,
   state,
   deco) {
      return A2($Html.div,
      _L.fromArray([$Html$Attributes.$class("item email")]),
      _L.fromArray([A2($Html.div,
                   _L.fromArray([$Html$Attributes.$class("timestamp")]),
                   _L.fromArray([$Html.text("Received: ")
                                ,$Html.text(state.$static.date)]))
                   ,A2($Html.div,
                   _L.fromArray([$Html$Attributes.$class("from")]),
                   _L.fromArray([$Html.text("From: ")
                                ,$Html.text(state.$static.from)]))
                   ,A2($Html.div,
                   _L.fromArray([$Html$Attributes.$class("to")]),
                   _L.fromArray([$Html.text("To: ")
                                ,$Html.text(state.$static.to)]))
                   ,A2($Html.h4,
                   _L.fromArray([]),
                   _L.fromArray([$Html.text("Subj: ")
                                ,$Html.text(state.$static.title)]))
                   ,A2($Html.div,
                   _L.fromArray([$Html$Attributes.$class("body")]),
                   _L.fromArray([$Html.text(makeBody(state))]))
                   ,A2($Html.div,
                   _L.fromArray([$Html$Attributes.$class("buttons")]),
                   A2($Basics._op["++"],
                   A2(makeMoreButton,
                   address,
                   state),
                   deco))]));
   });
   var init = function (m) {
      return {_: {}
             ,$static: m
             ,collapsed: true};
   };
   var Model = F2(function (a,b) {
      return {_: {}
             ,$static: a
             ,collapsed: b};
   });
   _elm.MailItem.values = {_op: _op
                          ,Model: Model
                          ,init: init
                          ,ToggleCollapse: ToggleCollapse
                          ,update: update
                          ,view: view
                          ,makeBody: makeBody
                          ,makeMoreButton: makeMoreButton};
   return _elm.MailItem.values;
};