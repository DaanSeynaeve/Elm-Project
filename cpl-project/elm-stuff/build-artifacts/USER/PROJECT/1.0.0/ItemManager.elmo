Elm.ItemManager = Elm.ItemManager || {};
Elm.ItemManager.make = function (_elm) {
   "use strict";
   _elm.ItemManager = _elm.ItemManager || {};
   if (_elm.ItemManager.values)
   return _elm.ItemManager.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "ItemManager",
   $Basics = Elm.Basics.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $ItemFeed = Elm.ItemFeed.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $ReminderForm = Elm.ReminderForm.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var update = F2(function (action,
   _v0) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple3":
            return function () {
                 switch (action.ctor)
                 {case "FD":
                    return {ctor: "_Tuple3"
                           ,_0: A2($ItemFeed.update,
                           action._0,
                           _v0._0)
                           ,_1: _v0._1
                           ,_2: _v0._2};
                    case "FM":
                    return {ctor: "_Tuple3"
                           ,_0: _v0._0
                           ,_1: A2($ReminderForm.update,
                           action._0,
                           _v0._1)
                           ,_2: _v0._2};
                    case "ToggleVisForm":
                    return {ctor: "_Tuple3"
                           ,_0: _v0._0
                           ,_1: _v0._1
                           ,_2: $Basics.not(_v0._2)};
                    case "Transfer":
                    return {ctor: "_Tuple3"
                           ,_0: A2($ItemFeed.update,
                           action._0,
                           _v0._0)
                           ,_1: A2($ReminderForm.update,
                           action._1,
                           _v0._1)
                           ,_2: _v0._2};}
                 return {ctor: "_Tuple3"
                        ,_0: _v0._0
                        ,_1: _v0._1
                        ,_2: _v0._2};
              }();}
         _U.badCase($moduleName,
         "between lines 35 and 43");
      }();
   });
   var Transfer = F2(function (a,
   b) {
      return {ctor: "Transfer"
             ,_0: a
             ,_1: b};
   });
   var FM = function (a) {
      return {ctor: "FM",_0: a};
   };
   var FD = function (a) {
      return {ctor: "FD",_0: a};
   };
   var view = F2(function (address,
   _v10) {
      return function () {
         switch (_v10.ctor)
         {case "_Tuple3":
            return function () {
                 var transfertag = function (x) {
                    return A2(Transfer,
                    $ItemFeed.AddItem($Basics.fst(x)),
                    $Basics.snd(x));
                 };
                 return A2($Html.div,
                 _L.fromArray([$Html$Attributes.id("pagewrap")]),
                 _L.fromArray([A2($ItemFeed.view,
                              A2($Signal.forwardTo,
                              address,
                              FD),
                              _v10._0)
                              ,_v10._2 ? A2($ReminderForm.view,
                              A2($Signal.forwardTo,
                              address,
                              transfertag),
                              _v10._1) : $Html.text("")]));
              }();}
         _U.badCase($moduleName,
         "between lines 49 and 59");
      }();
   });
   var ToggleVisForm = {ctor: "ToggleVisForm"};
   var init = F2(function (feed,
   form) {
      return {ctor: "_Tuple3"
             ,_0: feed
             ,_1: form
             ,_2: true};
   });
   _elm.ItemManager.values = {_op: _op
                             ,init: init
                             ,ToggleVisForm: ToggleVisForm
                             ,FD: FD
                             ,FM: FM
                             ,Transfer: Transfer
                             ,update: update
                             ,view: view};
   return _elm.ItemManager.values;
};