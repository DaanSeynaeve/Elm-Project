Elm.ItemManager = Elm.ItemManager || {};
Elm.ItemManager.make = function (_elm) {
   "use strict";
   _elm.ItemManager = _elm.ItemManager || {};
   if (_elm.ItemManager.values) return _elm.ItemManager.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $CustomTools = Elm.CustomTools.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $ItemDecorator = Elm.ItemDecorator.make(_elm),
   $ItemFeed = Elm.ItemFeed.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $ReminderForm = Elm.ReminderForm.make(_elm),
   $ReminderItem = Elm.ReminderItem.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm);
   var _op = {};
   var MultiAction = function (a) {
      return {ctor: "MultiAction",_0: a};
   };
   var ChangeStyle = function (a) {
      return {ctor: "ChangeStyle",_0: a};
   };
   var viewConfig = F2(function (address,state) {
      return A2($Html.div,
      _U.list([]),
      _U.list([$CustomTools.header("Configuration")
              ,$Html.text("Style: ")
              ,function () {
                 var target = $Signal.message(A2($Signal.forwardTo,
                 address,
                 ChangeStyle));
                 return A2($Html.select,
                 _U.list([A3($Html$Events.on,
                 "input",
                 $Html$Events.targetValue,
                 target)]),
                 _U.list([A2($Html.option,
                         _U.list([$Html$Attributes.value("style.css")]),
                         _U.list([$Html.text("Default")]))
                         ,A2($Html.option,
                         _U.list([$Html$Attributes.value("")]),
                         _U.list([$Html.text("None")]))]));
              }()]));
   });
   var ChangeTime = function (a) {
      return {ctor: "ChangeTime",_0: a};
   };
   var FM = function (a) {    return {ctor: "FM",_0: a};};
   var FD = function (a) {    return {ctor: "FD",_0: a};};
   var makeTransfer = F2(function (reminder,a) {
      var item = A2($ItemDecorator.decorate,
      $ItemDecorator.AReminder,
      reminder);
      return MultiAction(_U.list([FD($ItemFeed.AddItem(item))
                                 ,FM(a)]));
   });
   var makeTimeChange = F2(function (time,model) {
      var a2 = FM($ReminderForm.ChangeTime(time));
      var changeItemTime = $ItemDecorator.ReminderAction($ReminderItem.ChangeTime(time));
      var a1 = FD($ItemFeed.MapItemAction(changeItemTime));
      return MultiAction(_U.list([a1,a2]));
   });
   var update = F2(function (action,model) {
      update: while (true) {
         var _p0 = action;
         switch (_p0.ctor)
         {case "MultiAction": return A3($List.foldl,update,model,_p0._0);
            case "FD": return _U.update(model,
              {feed: A2($ItemFeed.update,_p0._0,model.feed)});
            case "FM": return _U.update(model,
              {form: A2($ReminderForm.update,_p0._0,model.form)});
            case "ToggleVisForm": return _U.update(model,
              {showForm: $Basics.not(model.showForm)});
            case "ChangeTime": var _v1 = A2(makeTimeChange,_p0._0,model),
              _v2 = model;
              action = _v1;
              model = _v2;
              continue update;
            default: return _U.update(model,{stylesheet: _p0._0});}
      }
   });
   var view = F2(function (address,model) {
      var fm = function (a) {
         var _p1 = A2($ReminderForm.makeResult,a,model.form);
         if (_p1.ctor === "Just") {
               return A2(makeTransfer,_p1._0,a);
            } else {
               return FM(a);
            }
      };
      return A2($Html.div,
      _U.list([$Html$Attributes.id("pagewrap")]),
      _U.list([A2($ItemFeed.view,
              A2($Signal.forwardTo,address,FD),
              model.feed)
              ,model.showForm ? A2($ReminderForm.view,
              A2($Signal.forwardTo,address,fm),
              model.form) : $Html.text("")
              ,A2(viewConfig,address,model)]));
   });
   var ToggleVisForm = {ctor: "ToggleVisForm"};
   var init = F2(function (feed,form) {
      return {feed: feed
             ,form: form
             ,showForm: true
             ,stylesheet: "style.css"};
   });
   var Model = F4(function (a,b,c,d) {
      return {feed: a,form: b,showForm: c,stylesheet: d};
   });
   return _elm.ItemManager.values = {_op: _op
                                    ,Model: Model
                                    ,init: init
                                    ,ToggleVisForm: ToggleVisForm
                                    ,FD: FD
                                    ,FM: FM
                                    ,ChangeTime: ChangeTime
                                    ,ChangeStyle: ChangeStyle
                                    ,MultiAction: MultiAction
                                    ,update: update
                                    ,makeTransfer: makeTransfer
                                    ,makeTimeChange: makeTimeChange
                                    ,view: view
                                    ,viewConfig: viewConfig};
};