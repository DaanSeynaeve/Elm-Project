Elm.ItemFeed = Elm.ItemFeed || {};
Elm.ItemFeed.make = function (_elm) {
   "use strict";
   _elm.ItemFeed = _elm.ItemFeed || {};
   if (_elm.ItemFeed.values) return _elm.ItemFeed.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $CustomTools = Elm.CustomTools.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $ItemDecorator = Elm.ItemDecorator.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var wrapItem = F2(function (focus,item) {
      return A2($Html.div,
      _U.list([$Html$Attributes.$class(focus ? "focus itemwrap" : "itemwrap")]),
      _U.list([item]));
   });
   var updateItem = F2(function (_p0,model) {
      var _p1 = _p0;
      var items$ = A2($List.map,
      function (_p2) {
         var _p3 = _p2;
         var _p5 = _p3._1;
         var _p4 = _p3._0;
         return _U.eq(_p1._0,_p4) ? {ctor: "_Tuple2"
                                    ,_0: _p4
                                    ,_1: A2($ItemDecorator.update,_p1._1,_p5)} : {ctor: "_Tuple2"
                                                                                 ,_0: _p4
                                                                                 ,_1: _p5};
      },
      model.items);
      return _U.update(model,{items: items$});
   });
   var containsItem = F2(function (item,model) {
      return A2($List.any,
      function (_p6) {
         return A2($ItemDecorator.itemEqual,item,$Basics.snd(_p6));
      },
      model.items);
   });
   var addItem = F2(function (item,model) {
      return $Basics.not(A2(containsItem,
      item,
      model)) ? _U.update(model,
      {items: A2($List._op["::"],
      {ctor: "_Tuple2",_0: $List.length(model.items),_1: item},
      model.items)}) : model;
   });
   var Next = {ctor: "Next"};
   var Prev = {ctor: "Prev"};
   var ToggleDoneVis = {ctor: "ToggleDoneVis"};
   var AddBatch = function (a) {
      return {ctor: "AddBatch",_0: a};
   };
   var AddItem = function (a) {
      return {ctor: "AddItem",_0: a};
   };
   var SortAction = function (a) {
      return {ctor: "SortAction",_0: a};
   };
   var ChangeFocus = function (a) {
      return {ctor: "ChangeFocus",_0: a};
   };
   var MapItemAction = function (a) {
      return {ctor: "MapItemAction",_0: a};
   };
   var FocusAction = function (a) {
      return {ctor: "FocusAction",_0: a};
   };
   var ItemAction = function (a) {
      return {ctor: "ItemAction",_0: a};
   };
   var viewItems = F4(function (address,fid,title,items) {
      var tag = F2(function (id,a) {
         return ItemAction({ctor: "_Tuple2",_0: id,_1: a});
      });
      var newAddress = function (id) {
         return A2($Signal.forwardTo,address,tag(id));
      };
      var subview = function (id) {
         return $ItemDecorator.view(newAddress(id));
      };
      return A2($Basics._op["++"],
      _U.list([$CustomTools.header(title)]),
      A2($List.map,
      function (_p7) {
         var _p8 = _p7;
         var _p9 = _p8._0;
         return A2(wrapItem,_U.eq(_p9,fid),A2(subview,_p9,_p8._1));
      },
      items));
   });
   var itemId = F2(function (items,i) {
      return A2($Maybe.map,
      $Basics.fst,
      $List.head(A2($List.drop,i,items)));
   });
   var splitFeed = function (items) {
      return A2($List.partition,
      function (_p10) {
         return $Basics.not(function (_) {
            return _.done;
         }($Basics.snd(_p10)));
      },
      items);
   };
   var sortedFeed = function (model) {
      var dateSorted = A2($List.sortBy,
      function (_p11) {
         return $ItemDecorator.itemTime($Basics.snd(_p11));
      },
      model.items);
      var _p12 = model.skey;
      if (_p12.ctor === "Default") {
            return A2($Basics.uncurry,
            F2(function (x,y) {    return A2($Basics._op["++"],x,y);}),
            A2($List.partition,
            function (_p13) {
               return function (_) {
                  return _.pinned;
               }($Basics.snd(_p13));
            },
            $List.reverse(dateSorted)));
         } else {
            return dateSorted;
         }
   };
   var visible = function (model) {
      var _p14 = splitFeed(sortedFeed(model));
      var l1 = _p14._0;
      var l2 = _p14._1;
      return model.showTodo ? A2($Basics._op["++"],l1,l2) : l1;
   };
   var getFid = function (model) {
      return A2($CustomTools._op["?"],
      -1,
      A2(itemId,visible(model),model.focus));
   };
   var updateFocus = function (model) {
      return _U.update(model,
      {focus: A2($Basics.min,
      model.focus,
      $List.length(visible(model)) - 1)});
   };
   var changeFocus = F2(function (fdir,model) {
      var len = $List.length(visible(model));
      var focus$ = function () {
         if (_U.eq(len,0)) return model.focus; else {
               var _p15 = fdir;
               if (_p15.ctor === "Next") {
                     return A2($Basics._op["%"],model.focus + 1,len);
                  } else {
                     return A2($Basics._op["%"],model.focus - 1,len);
                  }
            }
      }();
      return _U.update(model,{focus: focus$});
   });
   var update = F2(function (action,model) {
      return updateFocus(function () {
         var _p16 = action;
         switch (_p16.ctor)
         {case "ItemAction": return A2(updateItem,_p16._0,model);
            case "FocusAction": return A2(updateItem,
              {ctor: "_Tuple2",_0: getFid(model),_1: _p16._0},
              model);
            case "MapItemAction": var mapSnd = function (f) {
                 return $List.map(function (_p17) {
                    var _p18 = _p17;
                    return {ctor: "_Tuple2",_0: _p18._0,_1: f(_p18._1)};
                 });
              };
              return _U.update(model,
              {items: A2(mapSnd,$ItemDecorator.update(_p16._0),model.items)});
            case "AddItem": return A2(addItem,_p16._0,model);
            case "AddBatch": return A3($List.foldr,addItem,model,_p16._0);
            case "ChangeFocus": return A2(changeFocus,_p16._0,model);
            case "ToggleDoneVis": return _U.update(model,
              {showTodo: $Basics.not(model.showTodo)});
            default: return _U.update(model,{skey: _p16._0});}
      }());
   });
   var view = F2(function (address,model) {
      var fid = getFid(model);
      var subview = A2(viewItems,address,fid);
      var _p19 = splitFeed(sortedFeed(model));
      var l1 = _p19._0;
      var l2 = _p19._1;
      return A2($Html.div,
      _U.list([]),
      A2($Basics._op["++"],
      $Basics.not($List.isEmpty(l1)) ? A2(subview,
      "To Do",
      l1) : _U.list([]),
      $Basics.not($List.isEmpty(l2)) && model.showTodo ? A2(subview,
      "Done",
      l2) : _U.list([])));
   });
   var Model = F4(function (a,b,c,d) {
      return {items: a,focus: b,skey: c,showTodo: d};
   });
   var OldOnTop = {ctor: "OldOnTop"};
   var Default = {ctor: "Default"};
   var init = function (items) {
      return A2(update,
      AddBatch(items),
      {items: _U.list([]),focus: 0,skey: Default,showTodo: true});
   };
   return _elm.ItemFeed.values = {_op: _op
                                 ,Default: Default
                                 ,OldOnTop: OldOnTop
                                 ,Model: Model
                                 ,init: init
                                 ,sortedFeed: sortedFeed
                                 ,splitFeed: splitFeed
                                 ,visible: visible
                                 ,itemId: itemId
                                 ,getFid: getFid
                                 ,ItemAction: ItemAction
                                 ,FocusAction: FocusAction
                                 ,MapItemAction: MapItemAction
                                 ,ChangeFocus: ChangeFocus
                                 ,SortAction: SortAction
                                 ,AddItem: AddItem
                                 ,AddBatch: AddBatch
                                 ,ToggleDoneVis: ToggleDoneVis
                                 ,Prev: Prev
                                 ,Next: Next
                                 ,update: update
                                 ,containsItem: containsItem
                                 ,addItem: addItem
                                 ,updateItem: updateItem
                                 ,updateFocus: updateFocus
                                 ,changeFocus: changeFocus
                                 ,view: view
                                 ,viewItems: viewItems
                                 ,wrapItem: wrapItem};
};