Elm.ReminderForm = Elm.ReminderForm || {};
Elm.ReminderForm.make = function (_elm) {
   "use strict";
   _elm.ReminderForm = _elm.ReminderForm || {};
   if (_elm.ReminderForm.values) return _elm.ReminderForm.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $CustomTools = Elm.CustomTools.make(_elm),
   $Date = Elm.Date.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $ReminderItem = Elm.ReminderItem.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm);
   var _op = {};
   var viewDateInput = F2(function (s,target) {
      return A2($Html.input,
      _U.list([A3($Html$Events.on,
              "input",
              $Html$Events.targetValue,
              target)
              ,$Html$Attributes.value(s)
              ,$Html$Attributes.type$("date")]),
      _U.list([]));
   });
   var ChangeTime = function (a) {
      return {ctor: "ChangeTime",_0: a};
   };
   var Deadline = function (a) {
      return {ctor: "Deadline",_0: a};
   };
   var Created = function (a) {
      return {ctor: "Created",_0: a};
   };
   var Body = function (a) {    return {ctor: "Body",_0: a};};
   var Submit = {ctor: "Submit"};
   var defaultTime = function (time) {
      return $CustomTools.formatDate($Date.fromTime(time));
   };
   var view = F2(function (address,state) {
      var tag = function (x) {
         return $Signal.message(A2($Signal.forwardTo,address,x));
      };
      return A2($Html.div,
      _U.list([$Html$Attributes.id("reminder-form")]),
      _U.list([$CustomTools.header("Add Reminder")
              ,A2($Html.textarea,
              _U.list([A3($Html$Events.on,
                      "input",
                      $Html$Events.targetValue,
                      tag(Body))
                      ,$Html$Attributes.value(state.body)
                      ,$Html$Attributes.rows(2)
                      ,$Html$Attributes.cols(40)
                      ,$Html$Attributes.$class("big")]),
              _U.list([]))
              ,A2(viewDateInput,
              A2($CustomTools._op["?"],defaultTime(state.time),state.created),
              tag(Created))
              ,A2(viewDateInput,state.deadline,tag(Deadline))
              ,A2($Html.button,
              _U.list([A2($Html$Events.onClick,address,Submit)]),
              _U.list([$Html.text("Add")]))]));
   });
   var makeResult = F2(function (a,model) {
      var _p0 = a;
      if (_p0.ctor === "Submit") {
            var vals = {ctor: "_Tuple3"
                       ,_0: model.body
                       ,_1: A2($CustomTools._op["?"],
                       defaultTime(model.time),
                       model.created)
                       ,_2: model.deadline};
            return $Maybe.Just($ReminderItem.initNew(vals));
         } else {
            return $Maybe.Nothing;
         }
   });
   var init = {body: ""
              ,created: $Maybe.Nothing
              ,deadline: ""
              ,time: 0};
   var update = F2(function (a,model) {
      var _p1 = a;
      switch (_p1.ctor)
      {case "Body": return _U.update(model,{body: _p1._0});
         case "Created": return _U.update(model,
           {created: $Maybe.Just(_p1._0)});
         case "Deadline": return _U.update(model,{deadline: _p1._0});
         case "Submit": return _U.update(init,{time: model.time});
         default: return _U.update(model,{time: _p1._0});}
   });
   var Model = F4(function (a,b,c,d) {
      return {body: a,created: b,deadline: c,time: d};
   });
   var first = function (time) {
      return $Signal.dropRepeats(A3($Signal.foldp,
      F2(function (x,y) {
         return _U.eq(y,0) ? x : A2($Basics.min,x,y);
      }),
      0,
      time));
   };
   var signal = A2($Signal.map,
   ChangeTime,
   first($Time.every($Time.second)));
   return _elm.ReminderForm.values = {_op: _op
                                     ,signal: signal
                                     ,first: first
                                     ,Model: Model
                                     ,init: init
                                     ,defaultTime: defaultTime
                                     ,Submit: Submit
                                     ,Body: Body
                                     ,Created: Created
                                     ,Deadline: Deadline
                                     ,ChangeTime: ChangeTime
                                     ,update: update
                                     ,view: view
                                     ,viewDateInput: viewDateInput
                                     ,makeResult: makeResult};
};