Elm.CustomTools = Elm.CustomTools || {};
Elm.CustomTools.make = function (_elm) {
   "use strict";
   _elm.CustomTools = _elm.CustomTools || {};
   if (_elm.CustomTools.values) return _elm.CustomTools.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Date = Elm.Date.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm);
   var _op = {};
   var monthToInt = function (m) {
      var _p0 = m;
      switch (_p0.ctor)
      {case "Jan": return 1;
         case "Feb": return 2;
         case "Mar": return 3;
         case "Apr": return 4;
         case "May": return 5;
         case "Jun": return 6;
         case "Jul": return 7;
         case "Aug": return 8;
         case "Sep": return 9;
         case "Oct": return 10;
         case "Nov": return 11;
         default: return 12;}
   };
   var parseDate = function (dateString) {
      return $Date.toTime(A2($Result.withDefault,
      $Date.fromTime(0),
      $Date.fromString(dateString)));
   };
   var formatDate = function (time) {
      var leading0 = function (x) {
         return _U.cmp(x,10) < 0 ? "0" : "";
      };
      var date = $Date.fromTime(time);
      var month$ = function (_p1) {
         return monthToInt($Date.month(_p1));
      }(date);
      var day$ = $Date.day(date);
      return A2($Basics._op["++"],
      function (_p2) {
         return $Basics.toString($Date.year(_p2));
      }(date),
      A2($Basics._op["++"],
      "-",
      A2($Basics._op["++"],
      leading0(month$),
      A2($Basics._op["++"],
      $Basics.toString(month$),
      A2($Basics._op["++"],
      "-",
      A2($Basics._op["++"],
      leading0(day$),
      $Basics.toString(day$)))))));
   };
   var header = function (s) {
      return A2($Html.h2,_U.list([]),_U.list([$Html.text(s)]));
   };
   _op["?"] = F2(function ($default,mb) {
      return A2($Maybe.withDefault,$default,mb);
   });
   var watchSignal = function (caption) {
      return $Signal.map($Debug.watch(caption));
   };
   _op["$"] = watchSignal;
   var toMaybe = F2(function (a,bool) {
      var _p3 = bool;
      if (_p3 === true) {
            return $Maybe.Just(a);
         } else {
            return $Maybe.Nothing;
         }
   });
   var isDefined = function (maybe) {
      var _p4 = maybe;
      if (_p4.ctor === "Just") {
            return true;
         } else {
            return false;
         }
   };
   return _elm.CustomTools.values = {_op: _op
                                    ,isDefined: isDefined
                                    ,toMaybe: toMaybe
                                    ,watchSignal: watchSignal
                                    ,header: header
                                    ,formatDate: formatDate
                                    ,parseDate: parseDate
                                    ,monthToInt: monthToInt};
};