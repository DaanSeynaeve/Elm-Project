Elm.ItemDecorator = Elm.ItemDecorator || {};
Elm.ItemDecorator.make = function (_elm) {
   "use strict";
   _elm.ItemDecorator = _elm.ItemDecorator || {};
   if (_elm.ItemDecorator.values) return _elm.ItemDecorator.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $MailItem = Elm.MailItem.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $ReminderItem = Elm.ReminderItem.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var lblPinned = function (state) {
      return $Html.text(state.pinned ? "Unpin" : "Pin");
   };
   var lblDone = function (state) {
      return $Html.text(state.done ? "Undo" : "Done");
   };
   var MailAction = function (a) {
      return {ctor: "MailAction",_0: a};
   };
   var ToggleDone = {ctor: "ToggleDone"};
   var TogglePinned = {ctor: "TogglePinned"};
   var makeDecoration = F2(function (address,state) {
      return _U.list([A2($Html.button,
                     _U.list([A2($Html$Events.onClick,address,TogglePinned)]),
                     _U.list([lblPinned(state)]))
                     ,A2($Html.button,
                     _U.list([A2($Html$Events.onClick,address,ToggleDone)]),
                     _U.list([lblDone(state)]))]);
   });
   var view = F2(function (address,state) {
      var deco = A2(makeDecoration,address,state);
      var innerHtml = function () {
         var _p0 = state.item;
         if (_p0.ctor === "AMail") {
               return A3($MailItem.view,
               A2($Signal.forwardTo,address,MailAction),
               _p0._0,
               deco);
            } else {
               return A2($ReminderItem.view,_p0._0,deco);
            }
      }();
      return A2($Html.div,
      _U.list([$Html$Attributes.$class(state.pinned ? "pinned" : "")]),
      _U.list([innerHtml]));
   });
   var dateString = function (model) {
      var _p1 = model.item;
      if (_p1.ctor === "AMail") {
            return _p1._0.$static.date;
         } else {
            return _p1._0.$static.created;
         }
   };
   var decorate = F2(function (t,m) {
      return {item: t(m),pinned: false,done: false};
   });
   var Model = F3(function (a,b,c) {
      return {item: a,pinned: b,done: c};
   });
   var AReminder = function (a) {
      return {ctor: "AReminder",_0: a};
   };
   var AMail = function (a) {    return {ctor: "AMail",_0: a};};
   var update = F2(function (action,_p2) {
      var _p3 = _p2;
      var _p9 = _p3.pinned;
      var _p8 = _p3.item;
      var _p7 = _p3.done;
      var _p4 = function () {
         var _p5 = action;
         switch (_p5.ctor)
         {case "TogglePinned": return {ctor: "_Tuple3"
                                      ,_0: _p8
                                      ,_1: $Basics.not(_p9)
                                      ,_2: _p7};
            case "ToggleDone": return {ctor: "_Tuple3"
                                      ,_0: _p8
                                      ,_1: _p9
                                      ,_2: $Basics.not(_p7)};
            default: var _p6 = _p8;
              if (_p6.ctor === "AMail") {
                    return {ctor: "_Tuple3"
                           ,_0: AMail(A2($MailItem.update,_p5._0,_p6._0))
                           ,_1: _p9
                           ,_2: _p7};
                 } else {
                    return {ctor: "_Tuple3",_0: _p8,_1: _p9,_2: _p7};
                 }}
      }();
      var i = _p4._0;
      var p = _p4._1;
      var d = _p4._2;
      return {item: i,pinned: p,done: d};
   });
   return _elm.ItemDecorator.values = {_op: _op
                                      ,AMail: AMail
                                      ,AReminder: AReminder
                                      ,Model: Model
                                      ,decorate: decorate
                                      ,dateString: dateString
                                      ,TogglePinned: TogglePinned
                                      ,ToggleDone: ToggleDone
                                      ,MailAction: MailAction
                                      ,update: update
                                      ,view: view
                                      ,makeDecoration: makeDecoration
                                      ,lblDone: lblDone
                                      ,lblPinned: lblPinned};
};